import axios from "axios";
import Head from "next/head";
import { useCallback, useEffect, useState } from "react";
import { Table } from "../components/Table";
import { Modal } from "../components/Modal";
import classNames from "classnames";

const fetch = async (locale) => {
  const response = await axios.get(
    `http://localhost:3000/api/users?locale=${locale}`
  );
  return response.data.data;
};

export default function Home() {
  const [localTranslate, setLocalTranslate] = useState(null);
  const [selectedItem, setSelectedItem] = useState(null);
  const [locale, setLocale] = useState("en");
  const [mode, setMode] = useState("view");
  const [filterByConstant, setFilterByConstant] = useState("");
  
  useEffect(() => {
    fetch(locale).then((data) => {
      setLocalTranslate(data);
    });
  }, [locale]);

  return (
    <section>
      <Head>
        <title>CRUD Application</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="py-5">
        <h1 className="text-xl md:text-5xl text-center font-bold py-10">
          Employee Management
        </h1>

        <div className="container mx-auto flex justify-end py-5 border-b gap-3">
          <div className="relative w-72 ">
            <div className="flex absolute inset-y-0 left-0 items-center pl-3 pointer-events-none">
              <svg
                aria-hidden="true"
                className="w-5 h-5 text-gray-500 dark:text-gray-400"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"
                ></path>
              </svg>
            </div>

            <input
              onChange={(e) => setFilterByConstant(e.target.value)}
              type="search"
              autoComplete="off"
              id="default-search"
              className="block p-4 pl-10 w-full text-sm text-gray-900 bg-gray-50 rounded-lg border border-gray-300 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
              placeholder="Search Mockups, Logos..."
            />
            <button
              type="submit"
              className="text-white absolute right-2.5 bottom-2.5 bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-4 py-2 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800"
            >
              Search
            </button>
          </div>

          <select
            className="border border-gray-300 rounded h-min "
            defaultValue={locale}
            onChange={(e) => setLocale(e.target.value)}
          >
            <option value="ua">UA</option>
            <option value="de">DE</option>
            <option value="en">EN</option>
          </select>
        </div>

        {localTranslate && (
          <Table
            columns={[
              { title: "Default", itemField: "key" },
              {
                title: "",
                itemField: "translate",
                action: (item) => {
                  return (
                    <button
                      type="submit"
                      onClick={() => {
                        setMode("edit");
                        setSelectedItem(item);
                      }}
                      className="text-white bg-green-700 hover:bg-green-800 focus:ring-4  font-sm rounded-lg text-sm px-2 py-2"
                    >
                      Edit
                    </button>
                  );
                },
              },
            ]}
            data={Object.keys(localTranslate)
              .filter((constant) =>
                filterByConstant
                  ? constant.toLocaleLowerCase().includes(filterByConstant)
                  : !filterByConstant
              )
              .map((loc) => ({
                key: loc,
                translate: localTranslate[loc],
                active: selectedItem?.key === loc,
              }))}
            stripped
          />
        )}
      </main>
      <Modal
        open={mode === "edit"}
        onClose={() => {
          setMode("view");
          setSelectedItem(null);
        }}
      >
        <textarea
          rows={4}
          className={classNames(
            "w-full",
            "resize-none",
            "p-2",
            "focus:outline-none",
            "rounded-lg",
            "border-2",
            "border-gray-300",
            "focus:ring-blue-500",
            "focus:border-sky-500"
          )}
          autoComplete="off"
        >
          {selectedItem?.translate}
        </textarea>
      </Modal>
    </section>
  );
}
